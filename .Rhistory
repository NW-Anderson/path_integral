library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
Vs = c(0.5,1)
mu_bp = c(2.5e-8, 1.5e-7)
N_bp = c(10e3, 625e3)
N = c(500,1000,10000)
beta = c(0.01, 0.05, 0.1)
num_mutations = c(100,500,1000)
master <- data.frame()
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric()
phi_noC = numeric())
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi_noC = numeric())
p <- seq(0,1,length.out  = 101)
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
Vs = Vs_vec[1]
Vs_vec = c(0.5,1)
mu_bp_vec = c(2.5e-8, 1.5e-7)
# N_bp_vec = c(10e3, 625e3)
N_bp = 10e3
N_vec = c(500,1000,10000)
beta_vec = c(0.01, 0.05, 0.1)
num_mutations_vec = c(100,500,1000)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi_noC = numeric())
Vs = 1
mu_bp = 2.5e-8
N_bp = 10e3
beta = 0.01
mu_ind = mu_bp * N_bp
Vg = 4 * mu_ind * Vs
p <- seq(0,1,length.out  = 101)
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
# N_vec = c(500,1000,10000)
N = 1000
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
p = 0
wp = wp[1]
wp ^ (2 * N)
p ^ (4 * N * mu_bp - 1)
p
(4 * N * mu_bp - 1)
0 ^2
0 ^ -1
p[-c(1,101)]
p[-c(1,101)]
p <- seq(0,1,length.out  = 101)
p[-c(1,101)]
p <- seq(0,1,length.out  = 101)
p <- p[-c(1,101)]
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
phi <- phi_noC / sum(phi_noC)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi = numeric())
master <- data.frame(Vs = Vs,
mu_ind = mu_ind,
beta = beta,
p = p,
phi = phi) %>%
dplyr::bind_rows(master)
ggraptR(master)
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
Vs_vec = c(0.5,1)
mu_bp_vec = c(2.5e-8, 1.5e-7)
# N_bp_vec = c(10e3, 625e3)
N_bp = 10e3
# N_vec = c(500,1000,10000)
N = 1000
beta_vec = c(0.01, 0.05, 0.1)
num_mutations_vec = c(100,500,1000)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi = numeric())
for(Vs in Vs_vec){
for(mu_bp in mu_bp_vec){
mu_ind = mu_bp * N_bp
Vg = 4 * mu_ind * Vs
for(beta in beta_vec){
p <- seq(0,1,length.out  = 101)
p <- p[-c(1,101)]
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
phi <- phi_noC / sum(phi_noC)
master <- data.frame(Vs = Vs,
mu_ind = mu_ind,
beta = beta,
p = p,
phi = phi) %>%
dplyr::bind_rows(master)
}
}
}
ggraptR(master)
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both()) +
theme_bw() +
xlab("p") +
ylab("phi")
labeller = label_both +
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
plot(dnorm(sd = 0.05))
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
Vs_vec = c(0.5,1)
mu_bp_vec = c(2.5e-8, 1.5e-7)
# N_bp_vec = c(10e3, 625e3)
N_bp = 10e3
# N_vec = c(500,1000,10000)
N = 1000
beta_vec = c(0.01, 0.05, 0.1)
num_mutations_vec = c(100,500,1000)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi = numeric(),
wp = numeric())
for(Vs in Vs_vec){
for(mu_bp in mu_bp_vec){
mu_ind = mu_bp * N_bp
Vg = 4 * mu_ind * Vs
for(beta in beta_vec){
p <- seq(0,1,length.out  = 10001)
p <- p[-c(1,10001)]
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
phi <- phi_noC / sum(phi_noC)
master <- data.frame(Vs = Vs,
mu_ind = mu_ind,
beta = beta,
p = p,
phi = phi,
wp = wp) %>%
dplyr::bind_rows(master)
}
}
}
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p")
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
Vs_vec = c(0.5,1)
mu_bp_vec = c(2.5e-8, 1.5e-7)
# N_bp_vec = c(10e3, 625e3)
N_bp = 10e3
# N_vec = c(500,1000,10000)
N = 1000
beta_vec = c(0.01, 0.05, 0.1)
num_mutations_vec = c(100,500,1000)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi = numeric(),
wp = numeric())
for(Vs in Vs_vec){
for(mu_bp in mu_bp_vec){
mu_ind = mu_bp * N_bp
Vg = 4 * mu_ind * Vs
for(beta in beta_vec){
p <- seq(0,1,length.out  = 10001)
p <- p[-c(1,10001)]
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
phi <- phi_noC / sum(phi_noC)
master <- data.frame(Vs = Vs,
mu_ind = mu_ind,
beta = beta,
p = p,
phi = phi,
wp = wp) %>%
dplyr::bind_rows(master)
}
}
}
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ggtitle("Informed")
setwd("~/Documents/GitHub/path_integral")
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
library(ggbreak)
dev.off()
data <- fread("alpha_VG.csv")
data$popalpha = 1000 * data$alpha
tmp <- data[1:3,]
tmp$popalpha <- 0
tmp$Pdetected <- 0.01
data <- rbind(data,tmp)
rm(tmp)
# ggraptR(data)
ggplot(data = data, aes(x = popalpha, y = Pdetected)) +
geom_line(aes(color = as.factor(VG)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(VG)),
alpha=1,
size = 2.5) +
geom_hline(yintercept=0.01,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
geom_vline(xintercept=1,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
theme_bw() +
guides(color=guide_legend(title = "Genetic Variance",
override.aes = list(alpha=1))) +
# scale_x_break(c(1,2), scales = 0.9)
scale_x_continuous("Population Scaled Selection Coefficient",
breaks = c(0,0.25,0.5,0.75,1,2,5),
limits = c(0,5),
labels = c(0,0.25,0.5,0.75,1,2,5)) +
scale_y_continuous("P(detected)",
breaks = c(0.01,0.02,0.04,0.06)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,
colour = c(rep("black",4),"red",rep("black",2))))
#####################################################
data <- fread("alpha_mult.csv")
data$popalpha = 1000 * data$alpha
tmp <- data[1:3,]
tmp$popalpha <- 0
tmp$Pdetected <- 0.01
data <- rbind(data,tmp)
rm(tmp)
# ggraptR(data)
ggplot(data = data, aes(x = popalpha, y = Pdetected)) +
geom_line(aes(color = as.factor(mult)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(mult)),
alpha=1,
size = 2.5) +
geom_hline(yintercept=0.01,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
geom_vline(xintercept=1,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
theme_bw() +
guides(color=guide_legend(title = "Starting freq multiplier",
override.aes = list(alpha=1))) +
# scale_x_break(c(1,2), scales = 0.9)
scale_x_continuous("Population Scaled Selection Coefficient",
breaks = c(0,0.25,0.5,0.75,1,2,5),
limits = c(0,5),
labels = c(0,0.25,0.5,0.75,1,2,5)) +
scale_y_continuous("P(detected)",
breaks = c(0.01,0.02,0.04,0.06)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,
colour = c(rep("black",4),"red",rep("black",2))))
data <- fread("alpha_start.csv")
data$popalpha = 1000 * data$alpha
tmp <- data[1:3,]
tmp$popalpha <- 0
tmp$Pdetected <- 0.01
data <- rbind(data,tmp)
data <- fread("alpha_start.csv")
data$popalpha = 1000 * data$alpha
tmp <- data[1:3,]
tmp$popalpha <- 0
tmp$Pdetected <- 0.01
data <- rbind(data,tmp)
rm(tmp)
# ggraptR(data)
ggplot(data = data, aes(x = popalpha, y = Pdetected)) +
geom_line(aes(color = as.factor(start)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(start)),
alpha=1,
size = 2.5) +
geom_hline(yintercept=0.01,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
geom_vline(xintercept=1,
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
theme_bw() +
guides(color=guide_legend(title = "Starting freq",
override.aes = list(alpha=1))) +
# scale_x_break(c(1,2), scales = 0.9)
scale_x_continuous("Population Scaled Selection Coefficient",
breaks = c(0,0.25,0.5,0.75,1,2,5),
limits = c(0,5),
labels = c(0,0.25,0.5,0.75,1,2,5)) +
scale_y_continuous("P(detected)",
breaks = c(0.01,0.02,0.04,0.06)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,
colour = c(rep("black",4),"red",rep("black",2))))
