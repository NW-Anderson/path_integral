ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p")
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version â‰¥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
Vs_vec = c(0.5,1)
mu_bp_vec = c(2.5e-8, 1.5e-7)
# N_bp_vec = c(10e3, 625e3)
N_bp = 10e3
# N_vec = c(500,1000,10000)
N = 1000
beta_vec = c(0.01, 0.05, 0.1)
num_mutations_vec = c(100,500,1000)
master <- data.frame(Vs = numeric(),
mu_ind = numeric(),
beta = numeric(),
p = numeric(),
phi = numeric(),
wp = numeric())
for(Vs in Vs_vec){
for(mu_bp in mu_bp_vec){
mu_ind = mu_bp * N_bp
Vg = 4 * mu_ind * Vs
for(beta in beta_vec){
p <- seq(0,1,length.out  = 10001)
p <- p[-c(1,10001)]
w0 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * p^2 *beta^2) / (Vg+Vs))
w1 <- sqrt(Vs / (Vg + Vs)) * exp(-(beta^2 *  (2 * p - 1) ^ 2) / (2*(Vg + Vs)))
w2 <- sqrt(Vs / (Vg + Vs)) * exp(-(2 * (1-p)^2 *beta^2) / (Vg+Vs))
wp <- (1-p)^2 * w0 + 2 * p * (1-p) * w1 + p^2 * w2
phi_noC <- wp ^ (2 * N) * p ^ (4 * N * mu_bp - 1) * (1 - p) ^ (4 * N * mu_bp - 1)
phi <- phi_noC / sum(phi_noC)
master <- data.frame(Vs = Vs,
mu_ind = mu_ind,
beta = beta,
p = p,
phi = phi,
wp = wp) %>%
dplyr::bind_rows(master)
}
}
}
ggplot(master, aes(y=phi, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ylab("phi")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p")
ggplot(master, aes(y=wp, x=p)) +
geom_line(aes(colour=as.factor(beta)),
alpha=0.5) +
facet_grid(mu_ind ~ Vs,
labeller = label_both) +
theme_bw() +
xlab("p") +
ggtitle("Informed")
setwd("~/Documents/GitHub/path_integral")
library(ggraptR)
#set parameters
dt = .001
n = 1000
t = cumsum(rep(dt,n))
#Brownian motion
B = cumsum(rnorm(n,0,sqrt(dt)))
plot(t,B,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l")
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l")
plot(t,B,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l")
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l")
plot(t,X,type="l",ylims = c(0,1))
?plot
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l")
# genic selection
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", color = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", col = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l",col = "blue")
traj(p=0.03,w11=1, w12=1.05, w22=1.1,tgen=2000,col="red")
traj<-function(p,w11,w12,w22,tgen=200,plot.it=TRUE,add.it=FALSE,col="red"){
#w11<-.1
#w12<-1
#w22<-.1
p.array<-p
for(i in 1:tgen){
wbar<- w11*p^2 +w12*2*p*(1-p) + w22 * (1-p)^2
margin<-(w11*p + w12*(1-p)) - (w12*p + w22*(1-p))
d_p<-p*(1-p)*(margin) /(wbar)
p<- p+d_p
p.array<-c(p.array,p)
}
if(!add.it) plot(p.array,xlab="generations",ylab="Frequency of allele 1",type="l",lwd=3,col=col,ylim=c(0,1),cex.lab=1.5,cex.axis=1.5)
if(add.it) lines(p.array,lwd=3,col=col)
#if(plot.it==FALSE) return(p.array)
}
traj(p=0.03,w11=1, w12=1.05, w22=1.1,tgen=2000,col="red")
traj(p=0.03,w11=1, w12=1.05, w22=1.1,tgen=2000,col="red")
traj(p=0.03,w11=1, w12=.95, w22=.9,tgen=2000,col="red")
B = cumsum(rnorm(n,0,sqrt(dt)))
plot(t,B,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", col = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l",col = "blue")
B = cumsum(rnorm(n,0,sqrt(dt)))
plot(t,B,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", col = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l",col = "blue")
B = cumsum(rnorm(n,0,sqrt(dt)))
plot(t,B,type="l")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", col = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l",col = "blue")
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
plot(t,X,type="l",ylim = c(0,1))
#genic selection Wright-Fisher
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l", col = "red")
# genic selection
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
lines(t,X,type="l",col = "blue")
rep = 1
#neutral Wright-Fisher
Edx = function(x,t){0}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
tmp <- data.frame("neutral",rep,X,t)
master <- dplyr::bind_rows(master,tmp)
master <- data.frame("class","rep", "X", "t")
master <- dplyr::bind_rows(master,tmp)
head(master)
tmp <- data.frame(class = 0,rep = rep, X = X,t = t)
master <- data.frame("class","rep", "X", "t")
tmp <- data.frame(class = 0,rep = rep, X = X,t = t)
master <- data.frame("class","rep", "X", "t")
master <- data.frame("class","rep", "X", "t")
master
master <- data.frame("class","rep", "X", "t")
master <- data.frame("class","rep", "X", "t")
master <- data.frame(class = 0,rep = rep, X = X,t = t)
Numinteractions = 10
interactions = sample(n,Numinteractions)
interactions = sample(n,Numinteractions) %>% sort()
interactions = sample(2:n,Numinteractions) %>% sort()
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
i = 66
i %in% interactions
interactions = sample(2:n,Numinteractions) %>% sort()
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
if(i %in% interactions){
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
X[i] = X[i-1] + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
interactions = sample(2:n,Numinteractions) %>% sort()
Edx = function(x,t){5*x*(1-x)}
Vdx = function(x,t){x*(1-x)}
X = numeric(n)
X[1] = .3
for (i in 2:n) {
if(i %in% interactions){
X[i] = X[i-1] + Edx(X[i-1],t[i-1])*dt
X[i] = max(0,X[i])
X[i] = min(1,X[i])
} else{
X[i] = X[i-1] + sqrt(Vdx(X[i-1],t[i-1]))*rnorm(1,0,sqrt(dt))
X[i] = max(0,X[i])
X[i] = min(1,X[i])
}
}
master <- dplyr::bind_rows(master,
data.frame(class = 0,rep = rep, X = X,t = t))
