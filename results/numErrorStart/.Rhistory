library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version â‰¥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
library(ggbreak)
library(ggimage)
library(rsvg)
library(ggrepel)
library(shadowtext)
dev.off()
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectionAlphaVG")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("alpha", "VG", "start",
"time", "thresh", "pintAUC",
"pintDetected", "numAUC", "numDetected",
"statDist")
master$popalpha = 1000 * master$alpha
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
master <- master %>% filter(VG  == 1e-3)
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(reps in c(5, 10, 15, 20)){
for(j in 0:reps){
foo <- data.table(reps = paste(reps, " Replicates"),
reps_number = reps,
bin = j,
popalpha = tmp$popalpha,
prob = choose(reps, j) *
tmp$pintDetected^j *
(1 - tmp$pintDetected)^(reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
}
rm(foo, tmp, file, i, j)
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectionAlphaVG")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("alpha", "VG", "start",
"time", "thresh", "pintAUC",
"pintDetected", "numAUC", "numDetected",
"statDist")
master$popalpha = 1000 * master$alpha
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
master <- master %>% filter(VG  == 1e-3)
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(reps in c(5, 10, 15, 20)){
for(j in 0:reps){
foo <- data.table(reps = paste(reps, " Replicates"),
reps_number = reps,
bin = j,
popalpha = tmp$popalpha,
prob = choose(reps, j) *
tmp$pintDetected^j *
(1 - tmp$pintDetected)^(reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
}
rm(foo, tmp, file, i, j)
dfdetected <- df %>% filter(bin > 0) %>%
group_by(reps, popalpha) %>%
mutate(Pdetected = sum(prob)) %>%
mutate(prob = prob / Pdetected,
# # bin = as.factor(bin),
# Ne = as.factor(Ne),
reps = as.factor(reps),
popalpha = as.factor(popalpha)) %>% ungroup()
dfdetected$reps <- factor(dfdetected$reps,
levels = levels(dfdetected$reps)[c(4,1,2,3)])
dfnotdetected <- df %>% filter(bin == 0) %>%
mutate(reps = as.factor(reps),
popalpha = as.factor(popalpha),
pdetected = paste("P(detected > 0 times) : ",formatC(round(1-prob,3),3,format="f"))) %>%
mutate(pdetected = as.factor(pdetected))
dfnotdetected$reps_number <- rep(c(3.5,
6.75,
9.75,
13),
6)
dfnotdetected$vjust = rep((1.5 * 1:6), each = 4)
breaksfun <- function(x){
1:max(x)
}
ggplot(dfdetected, aes(y = prob,
x = bin,
color = popalpha)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ reps, scales="free") +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_color_viridis(discrete = T) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 12)) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_text(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pdetected,
vjust = vjust)) +
guides(color=guide_legend(title = "Selection\nCoefficient",
override.aes = list(alpha=1)))
##
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectedAlphaNE")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("selCoef", "Ne", "time", "start",
"thresh", "pintAUC", "pintdetected",
"numAUC", "numdetected", "statDist")
master$popalpha = 2 * master$Ne * master$selCoef
rm(tmp)
master <- master %>% filter(selCoef == 1e-2)
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(reps in c(5, 10, 15, 20)){
for(j in 0:reps){
foo <- data.table(reps = paste(reps, " Replicates"),
reps_number = reps,
bin = j,
selCoef = tmp$selCoef,
Ne = tmp$Ne,
prob = choose(reps, j) *
tmp$pintdetected^j *
(1 - tmp$pintdetected)^(reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
}
rm(foo, tmp, file, i, j)
dfdetected <- df %>% filter(bin > 0) %>%
group_by(reps, Ne) %>%
mutate(pintdetected = sum(prob)) %>%
mutate(prob = prob / pintdetected,
# # bin = as.factor(bin),
Ne = as.factor(Ne),
reps = as.factor(reps)) %>% ungroup()
dfdetected$reps <- factor(dfdetected$reps,
levels = levels(dfdetected$reps)[c(4,1,2,3)])
dfnotdetected <- df %>% filter(bin == 0) %>%
mutate(reps = as.factor(reps),
Ne = as.factor(Ne),
pintdetected = paste("P(detected > 0 times) : ",formatC(round(1-prob,3),3,format="f"))) %>%
mutate(pintdetected = as.factor(pintdetected))
dfnotdetected$reps_number <- rep(c(3.5,
6.75,
9.75,
13),
4)
dfnotdetected$vjust = rep((1.5 * c(4,1,2,3)), each = 4)
breaksfun <- function(x){
1:max(x)
}
ggplot(dfdetected, aes(y = prob,
x = bin,
color = Ne)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ reps, scales="free") +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_color_viridis(discrete = T) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 12)) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_shadowtext(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pintdetected,
vjust = vjust),
size = 6.5,
bg.color = "darkgrey",
bg.r = 0.03,
show.legend = F) +
guides(color=guide_legend(title = bquote(N[e]),
override.aes = list(alpha=1))) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12))
ggplot(dfdetected, aes(y = prob,
x = bin,
color = Ne)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ reps, scales="free") +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_color_viridis(discrete = T) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 12)) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_shadowtext(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pintdetected,
vjust = vjust),
size = 6.5,
bg.color = "darkgrey",
bg.r = 0.03,
show.legend = F) +
guides(color=guide_legend(title = bquote(N[e]),
override.aes = list(alpha=1),
nrow = 1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.position = "bottom")
#
rm(list=ls())
x <- seq(from = -2, to = 3, length.out = 500)
phenodist <- dnorm(x, sd = sqrt(10^-2))
phenodist <- phenodist / max(phenodist)
olddist <- dnorm(x, sd = 1)
olddist <- olddist / max(olddist)
newdist <- dnorm(x, mean = 1, sd = 1)
newdist <- newdist / max(newdist)
df <- dplyr::bind_rows(data.table(x = x,
y = phenodist,
class = "pheno",
cols = 1),
data.table(x = x,
y = olddist,
class = "old",
cols = 2),
data.table(x = x,
y = newdist,
class = "new",
cols = 2))
areadf <- data.table(x = x,
y = phenodist,
class = "pheno",
cols = 1)
the_colors <- c(rgb(0.831964, 0.810543, 0.372854),
rgb(0.35082, 0.595178, 0.853742))
ggplot(df, aes(x = x, y = y)) +
geom_line(aes(color = class,
linetype = class,
group = class),
linewidth = 2,
alpha = 0.75) +
scale_color_manual(values = c(rep(the_colors[1],2), the_colors[2]),
labels=c("Shifted Fitness\n Function",
"Initial Fitness\n Function",
"Initial Trait\n Distribution"),
name = "") +
scale_linetype_manual(values = c("dotted", rep("solid",2)),
labels=c("Shifted Fitness\n Function",
"Initial Fitness\n Function",
"Initial Trait\n Distribution"),
name = "") +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
legend.position = "bottom",
axis.title.x = element_text(size=18),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_x_continuous(breaks = c(0,1),
labels = c("0" = "Old\nOptimum",
"1" = "New\nOptimum"),
name = "Trait Value") +
guides(linetype = guide_legend(override.aes = list(linewidth = 2),
nrow = 1)) +
geom_area(data = areadf,
fill = the_colors[2],
alpha = 0.5)
##################
####
rm(list = ls())
setwd("~/Documents/GitHub/path_integral/results/numErrorTime")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("time", "VG", "pintAUC", "numAUC", "statDist")
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
ggplot(data = master, aes(x = time, y = statDist)) +
geom_line(aes(color = as.factor(VG)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(VG)),
alpha=1,
size = 2.5) +
theme_bw() +
guides(color=guide_legend(title = bquote(V[G]),
override.aes = list(alpha=1))) +
xlab("Time (Genomic Units)") +
ylab("Statistical Distance") +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
geom_hline(yintercept=0,
linetype="dashed",
color = turbo(11)[11], size  = 0.75)
# mster <- master %>% filter(VG<=0.001)
# ggplot(data = mster, aes(x = time, y = error)) +
#   geom_line(aes(color = as.factor(VG)),
#             alpha = 0.6,
#             size = 1.5) +
#   geom_point(aes(color = as.factor(VG)),
#              alpha=1,
#              size = 2.5) +
#   theme_bw() +
#   guides(color=guide_legend(title = "Genetic Variance",
#                             override.aes = list(alpha=1))) +
#   scale_x_continuous("Population Scaled Selection Coefficient") +
#   scale_y_continuous("Absolute Error") +
#   theme(panel.grid.minor.y = element_blank(),
#         panel.grid.minor.x = element_blank()) +
#   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
#   scale_color_viridis(discrete = T)
#################
#
rm(list = ls())
setwd("~/Documents/GitHub/path_integral/results/numErrorK")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("k", "VG", "pintAUC", "numAUC", "statDist")
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
ggplot(data = master, aes(x = k, y = statDist)) +
geom_line(aes(color = as.factor(VG)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(VG)),
alpha=1,
size = 2.5) +
theme_bw() +
guides(color=guide_legend(title = bquote(V[G]),
override.aes = list(alpha=1))) +
scale_x_continuous(bquote(k[max])) +
scale_y_continuous("Statistical Distance") +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
geom_hline(yintercept=0,
linetype="dashed",
color = turbo(11)[11], size  = 0.75)
#####################
###
rm(list = ls())
setwd("~/Documents/GitHub/path_integral/results/numErrorStart")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("start", "VG", "pintAUC", "numAUC", "statDist")
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
ggplot(data = master, aes(x = start, y = statDist)) +
geom_line(aes(color = as.factor(VG)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(VG)),
alpha=1,
size = 2.5) +
theme_bw() +
guides(color=guide_legend(title = bquote(V[G]),
override.aes = list(alpha=1))) +
scale_x_continuous("Starting Frequency",
breaks = (1:9 / 10)) +
scale_y_continuous("Statistical Distance") +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
geom_hline(yintercept=0,
linetype="dashed",
color = turbo(11)[11], size  = 0.75)
##############################
####
rm(list = ls())
setwd("~/Documents/GitHub/path_integral/results/numErrorStart")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("start", "VG", "pintAUC", "numAUC", "statDist")
rm(tmp, file)
master$statDist <- statDist <- master$statDist %>%
gsub('[{}]', '', .) %>%
gsub("\\*\\^", "e", .) %>%
as.numeric()
ggplot(data = master, aes(x = start, y = statDist)) +
geom_line(aes(color = as.factor(VG)),
alpha = 0.6,
size = 1.5) +
geom_point(aes(color = as.factor(VG)),
alpha=1,
size = 2.5) +
theme_bw() +
guides(color=guide_legend(title = bquote(V[G]),
override.aes = list(alpha=1))) +
scale_x_continuous("Starting Frequency",
breaks = (1:9 / 10)) +
scale_y_continuous("Statistical Distance") +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
geom_hline(yintercept=0,
linetype="dashed",
color = turbo(11)[11], size  = 0.75)
###############################
