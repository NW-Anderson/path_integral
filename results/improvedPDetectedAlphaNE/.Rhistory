end <- params[2] %>%
gsub("end", "", .) %>%
as.numeric()
selCoef <- params[3] %>%
gsub("selCoef.csv", "", .) %>%
as.numeric()
tmp <- fread(file) %>%
unlist()
genic <- dplyr::bind_rows(genic, data.frame(dens = tmp,
end = end,
selCoef = selCoef))
}
}
genic <- genic %>%
mutate(selCoef = case_when(selCoef == 5 ~ "\u03b1 = 0.005",
selCoef == 10 ~ "\u03b1 = 0.01"),
clr = "3")
# pints <- pints %>% filter(end_freq <= 0.5, end_freq > 0)
# allele_freqs <- allele_freqs %>% filter(end_freqs <= 0.5, end_freqs > 0)
# genic <- genic %>% filter(end <= 0.5, end > 0)
pints <- pints %>% filter(end_freq > 0)
allele_freqs <- allele_freqs %>% filter(end_freqs > 0)
genic <- genic %>% filter(end > 0)
pint_means <- pints %>% group_by(bigU, selCoef) %>%
mutate(total_dens = sum(density)) %>%
mutate(norm_dens = density / total_dens) %>%
summarize(expectation = sum(norm_dens * end_freq)) %>%
ungroup()
group_means <- allele_freqs %>% group_by(bigU, selCoef) %>%
summarize(mn = mean(end_freqs))
genic_means <- genic %>% group_by(selCoef) %>%
mutate(total_dens = sum(dens)) %>%
mutate(norm_dens = dens / total_dens) %>%
summarize(expectation = sum(norm_dens * end)) %>%
ungroup()
ggplot(data = allele_freqs, aes(x = end_freqs, color = clr)) +
geom_density(show.legend = F, size = 1.25,
alpha = 1.75) +
xlim(0,1) +
labs(
title = "Unlinked: Ending Frequency for Alleles Starting Between 0.09 and 0.11") +
scale_x_continuous("Ending Frequency",
breaks = seq(0,1,0.2)) +
scale_y_continuous("Density") +
facet_grid(cols = vars(selCoef),
rows = vars(bigU)) +
theme_bw() +
geom_vline(data = group_means, aes(xintercept = mn),
linetype = "dashed",
color = turbo(10)[2]) +
geom_line(data = pints, aes(x = end_freq, y = density, color = clr),
size = 1.25,
alpha = 0.75) +
scale_color_manual(values = c(turbo(10)[2],
turbo(10)[8],
turbo(10)[5]),
name = "",
labels = c("Unlinked\n Simulation",
"Hayward",
"Genic")) +
geom_vline(data = pint_means, aes(xintercept = expectation),
linetype = "dashed",
color = turbo(10)[8]) +
geom_line(data = genic, aes(x = end, y = dens, color = clr),
size = 1.25,
alpha = 0.75) +
geom_vline(data = genic_means, aes(xintercept = expectation),
linetype = "dashed",
color = turbo(10)[5]) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.position = "bottom")
########
#####
setwd("/media/nathan/T7/path_integral/simulations/out")
allele_freqs <- fread("linked_positive_eff_09_11.csv.gz")  %>%
mutate(clr = "1",
bigU = case_when(group_id %in% c("U=0.0025_a=0.005", "U=0.0025_a=0.01") ~ "U = 0.0025",
group_id %in% c("U=0.025_a=0.005", "U=0.025_a=0.01") ~ "U = 0.025"),
selCoef = case_when(group_id %in% c("U=0.025_a=0.01", "U=0.0025_a=0.01") ~ "\u03b1 = 0.01",
group_id %in% c("U=0.025_a=0.005", "U=0.0025_a=0.005") ~ "\u03b1 = 0.005"))
setwd("/media/nathan/T7/path_integral/simulations/out/pintComparison")
pints <- fread("linked_sim_pint_densities.csv") %>%
mutate(clr = "2",
bigU = case_when(Scenario %in% c(1,2) ~ "U = 0.0025",
Scenario %in% c(3,4) ~ "U = 0.025"),
selCoef = case_when(Scenario %in% c(1,3) ~ "\u03b1 = 0.005",
Scenario %in% c(2,4) ~ "\u03b1 = 0.01"))
setwd("/media/nathan/T7/path_integral/genicSimComparison")
genic <- data.frame()
for(file in list.files()){
if(file != "k=5"){
params <- strsplit(file, split = "_")[[1]]
end <- params[2] %>%
gsub("end", "", .) %>%
as.numeric()
selCoef <- params[3] %>%
gsub("selCoef.csv", "", .) %>%
as.numeric()
tmp <- fread(file) %>%
unlist()
genic <- dplyr::bind_rows(genic, data.frame(dens = tmp,
end = end,
selCoef = selCoef))
}
}
genic <- genic %>%
mutate(selCoef = case_when(selCoef == 5 ~ "\u03b1 = 0.005",
selCoef == 10 ~ "\u03b1 = 0.01"),
clr = "3")
# pints <- pints %>% filter(end_freq <= 0.5, end_freq > 0)
# allele_freqs <- allele_freqs %>% filter(end <= 0.5, end > 0)
# genic <- genic %>% filter(end <= 0.5, end > 0)
pints <- pints %>% filter(end_freq > 0)
allele_freqs <- allele_freqs %>% filter(end > 0)
genic <- genic %>% filter(end > 0)
pint_means <- pints %>% group_by(bigU, selCoef) %>%
mutate(total_dens = sum(Dens)) %>%
mutate(norm_dens = Dens / total_dens) %>%
summarize(expectation = sum(norm_dens * end_freq)) %>%
ungroup()
group_means <- allele_freqs %>% group_by(bigU, selCoef) %>%
summarize(mn = mean(end)) %>%
ungroup()
genic_means <- genic %>% group_by(selCoef) %>%
mutate(total_dens = sum(dens)) %>%
mutate(norm_dens = dens / total_dens) %>%
summarize(expectation = sum(norm_dens * end)) %>%
ungroup()
ggplot(data = allele_freqs, aes(x = end, color = clr)) +
geom_density(show.legend = F, size = 1.25,
alpha = 1.75) +
xlim(0,1) +
labs(
title = "Linked: Ending Frequency for Alleles Starting Between 0.09 and 0.11") +
scale_x_continuous("Ending Frequency",
breaks = seq(0,1,0.2)) +
scale_y_continuous("Density") +
facet_grid(rows = vars(bigU),
cols = vars(selCoef)) +
theme_bw() +
geom_vline(data = group_means, aes(xintercept = mn),
linetype = "dashed",
color = turbo(10)[1]) +
geom_line(data = pints, aes(x = end_freq, y = Dens, color = clr),
size = 1.25,
alpha = 0.75) +
scale_color_manual(values = c(turbo(10)[1],
turbo(10)[8],
turbo(10)[5]),
name = "",
labels = c("Linked\n Simulation",
"Hayward",
"Genic")) +
geom_vline(data = pint_means, aes(xintercept = expectation),
linetype = "dashed",
color = turbo(10)[8]) +
geom_line(data = genic, aes(x = end, y = dens, color = clr),
size = 1.25,
alpha = 0.75) +
geom_vline(data = genic_means, aes(xintercept = expectation),
linetype = "dashed",
color = turbo(10)[5]) +
theme(axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.position = "bottom")
########
gc()
##
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectedAlphaNE")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("selCoef", "Ne", "time", "start",
"thresh", "pintAUC", "pintdetected",
"numAUC", "numdetected", "statDist")
master$popalpha = 2 * master$Ne * master$selCoef
rm(tmp)
master <- master %>% filter(selCoef == 0.01)
master$reps = 1000 / master$Ne
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(j in 0:tmp$reps){
foo <- data.table(Ne = tmp$Ne,
reps = paste(tmp$reps,
" Replicates of Size ",
tmp$Ne),
reps_number = tmp$reps,
bin = j,
prob = choose(tmp$reps, j) *
tmp$pintdetected^j *
(1 - tmp$pintdetected)^(tmp$reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
rm(foo, master, tmp, file, i, j)
dfdetected <- df %>% filter(bin > 0) %>%
group_by(reps) %>%
mutate(pintdetected = sum(prob)) %>%
mutate(prob = prob / pintdetected) %>% ungroup()
dfnotdetected <- df %>% filter(bin == 0)
dfnotdetected$reps_number <- c(1,3,2.5,1.5)
ggplot(dfdetected, aes(y=prob, x=as.factor(bin))) +
geom_bar(stat="identity",
fill = viridis(4)[2],
alpha = 0.5) +
facet_wrap(~ reps, scales="free_x") +
theme_bw() +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_text(data = dfnotdetected, aes(x = reps_number,
y = 1.1,
label = paste("P(detected > 0 times) : ",round(1- prob,3))),
hjust = 0.5, vjust = 1) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1))
#############
###
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectedAlphaNE")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("selCoef", "Ne", "time", "start",
"thresh", "pintAUC", "pintdetected",
"numAUC", "numdetected", "statDist")
master$popalpha = 2 * master$Ne * master$selCoef
rm(tmp)
# master <- master %>% filter(selCoef == 0.01)
master$reps = 4000 / master$Ne
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(j in 0:tmp$reps){
foo <- data.table(Ne = tmp$Ne,
reps = paste(tmp$reps),
selCoef = tmp$selCoef,
reps_number = tmp$reps,
bin = j,
prob = choose(tmp$reps, j) *
tmp$pintdetected^j *
(1 - tmp$pintdetected)^(tmp$reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
rm(foo, master, tmp, file, i, j)
dfdetected <- df %>% filter(bin > 0) %>%
group_by(reps, selCoef) %>%
mutate(pintdetected = sum(prob)) %>%
mutate(prob = prob / pintdetected,
selCoef = as.factor(selCoef),
reps = as.factor(reps)) %>% ungroup()
dfdetected$reps <- factor(dfdetected$reps,
levels = levels(dfdetected$reps)[c(3,4,1,2)])
dfnotdetected <- df %>% filter(bin == 0) %>%
mutate(reps = as.factor(reps),
selCoef = as.factor(selCoef),
pintdetected = paste("P(detected > 0 times) : ",formatC(round(1-prob,3),3,format="f"))) %>%
mutate(pintdetected = as.factor(pintdetected))
dfnotdetected$reps_number <- rep(c(3,
13.6,
11,
5.7),
each = 5)
dfnotdetected$vjust = rep((1.5 * c(2,3,4,5,1)), 4)
breaksfun <- function(x){
1:max(x)
}
# my_labeller = as_labeller(
#   c("1" = "2 * N[e] * `\u03b1 \u039b / W = 1`",
#     "10" = "2 * N[e] * `\u03b1 \u039b / W = 10`",
#     "geg10" = "m[max]==10",
#     "geg50" = "m[max]==50"),
#   default = label_parsed
# )
my_labeller = as_labeller(
c("4" = "4 ~ `Replicates,` ~ N[e] == 1000",
"8" = "8 ~ `Replicates,` ~ N[e] == 500",
"16" = "16 ~ `Replicates,` ~ N[e] == 250",
"20" = "20 ~ `Replicates,` ~ N[e] == 200"),
default = label_parsed
)
ggplot(dfdetected, aes(y=prob, x=bin, color = selCoef,
group = selCoef)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ factor(reps,
levels = unique(dfdetected$reps)[c(1,4,3,2)]),
scales="free_x",
labeller = my_labeller) +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_viridis(discrete = T) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_shadowtext(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pintdetected,
vjust = vjust),
size = 6.5,
bg.color = "darkgrey", bg.r = 0.03,
show.legend = F) +
guides(color=guide_legend(title = "\u03b1",
override.aes = list(alpha=1),
nrow = 1)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.text.x = element_text(angle = 45,
vjust = 1,
hjust=1),
legend.position = "bottom")
library(ggraptR)
library(poolSeq)
library(patchwork)
library(dplyr)
library(ggridges)
library(tidyr)
library(viridis)
library(colorspace)
library(gganimate)
library(gifski)
library(av)
library(png)
library(magick)
library(scico)
library(plotrix)
library(ggdensity)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
library(devtools)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
library(ggraph)
library(tidygraph)
library(vcfR)
library(ggplotify)
library(pheatmap)
library(ggbreak)
library(ggimage)
library(rsvg)
library(ggrepel)
library(shadowtext)
dev.off()
#######
rm(list=ls())
setwd("~/Documents/GitHub/path_integral/results/improvedPDetectedAlphaNE")
list.files()
master <- data.frame()
for(file in list.files()){
tmp <- fread(file)
master <- dplyr::bind_rows(master, tmp)
}
names(master) <- c("selCoef", "Ne", "time", "start",
"thresh", "pintAUC", "pintdetected",
"numAUC", "numdetected", "statDist")
master$popalpha = 2 * master$Ne * master$selCoef
rm(tmp)
# master <- master %>% filter(selCoef == 0.01)
master$reps = 4000 / master$Ne
df <- data.table()
for(i in 1:nrow(master)){
tmp <- master[i,]
for(j in 0:tmp$reps){
foo <- data.table(Ne = tmp$Ne,
reps = paste(tmp$reps),
selCoef = tmp$selCoef,
reps_number = tmp$reps,
bin = j,
prob = choose(tmp$reps, j) *
tmp$pintdetected^j *
(1 - tmp$pintdetected)^(tmp$reps - j))
df <- dplyr::bind_rows(df, foo)
}
}
rm(foo, master, tmp, file, i, j)
dfdetected <- df %>% filter(bin > 0) %>%
group_by(reps, selCoef) %>%
mutate(pintdetected = sum(prob)) %>%
mutate(prob = prob / pintdetected,
selCoef = as.factor(selCoef),
reps = as.factor(reps)) %>% ungroup()
dfdetected$reps <- factor(dfdetected$reps,
levels = levels(dfdetected$reps)[c(3,4,1,2)])
dfnotdetected <- df %>% filter(bin == 0) %>%
mutate(reps = as.factor(reps),
selCoef = as.factor(selCoef),
pintdetected = paste("P(detected > 0 times) : ",formatC(round(1-prob,3),3,format="f"))) %>%
mutate(pintdetected = as.factor(pintdetected))
dfnotdetected$reps_number <- rep(c(3,
13.6,
11,
5.7),
each = 5)
dfnotdetected$vjust = rep((1.5 * c(2,3,4,5,1)), 4)
breaksfun <- function(x){
1:max(x)
}
# my_labeller = as_labeller(
#   c("1" = "2 * N[e] * `\u03b1 \u039b / W = 1`",
#     "10" = "2 * N[e] * `\u03b1 \u039b / W = 10`",
#     "geg10" = "m[max]==10",
#     "geg50" = "m[max]==50"),
#   default = label_parsed
# )
my_labeller = as_labeller(
c("4" = "4 ~ `Replicates,` ~ N[e] == 1000",
"8" = "8 ~ `Replicates,` ~ N[e] == 500",
"16" = "16 ~ `Replicates,` ~ N[e] == 250",
"20" = "20 ~ `Replicates,` ~ N[e] == 200"),
default = label_parsed
)
ggplot(dfdetected, aes(y=prob, x=bin, color = selCoef,
group = selCoef)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ factor(reps,
levels = unique(dfdetected$reps)[c(1,4,3,2)]),
scales="free_x",
labeller = my_labeller) +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_viridis(discrete = T) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_shadowtext(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pintdetected,
vjust = vjust),
size = 6.5,
bg.color = "darkgrey", bg.r = 0.03,
show.legend = F) +
guides(color=guide_legend(title = "\u03b1",
override.aes = list(alpha=1),
nrow = 1)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.text.x = element_text(angle = 45,
vjust = 1,
hjust=1),
legend.position = "bottom")
#############
ggplot(dfdetected, aes(y=prob, x=bin, color = selCoef,
group = selCoef)) +
geom_line(alpha = 0.6,
size = 1.5) +
geom_point(alpha=1,
size = 2.5) +
facet_wrap(~ factor(reps,
levels = unique(dfdetected$reps)[c(1,4,3,2)]),
scales="free_x",
labeller = my_labeller) +
theme_bw() +
scale_x_continuous(breaks = breaksfun) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_viridis(discrete = T) +
xlab("Number of Replicates Detected") +
ylab("Probability Given Detected at least Once") +
geom_shadowtext(data = dfnotdetected, aes(x = reps_number,
y = 1,
label = pintdetected,
vjust = vjust),
size = 5.5,
bg.color = "darkgrey", bg.r = 0.03,
show.legend = F) +
guides(color=guide_legend(title = "\u03b1",
override.aes = list(alpha=1),
nrow = 1)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_text(size=18),
title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12),
axis.text.x = element_text(angle = 45,
vjust = 1,
hjust=1),
legend.position = "bottom")
